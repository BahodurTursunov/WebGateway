@page "/login"
@using GatewayDTO.User
@using WebGateway.UI.Authentication
@using System.Net
@inject HttpClient _httpClient
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <h3>Логин</h3>
            </div>
            <div class="mb-3">
                <label>Логин</label>
                <InputText @bind-Value="Model.login" class="form-control" placeholder="Логин" />
                <ValidationMessage For="() => Model.login" />
            </div>
            <div class="mb-3">
                <label>Пароль</label>
                <InputText @bind-Value="Model.password" placeholder="Пароль" type="password" class="form-control" />
                <ValidationMessage For="() => Model.password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Вход</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private UserReuestForToken Model = new UserReuestForToken();

    private string? errorMessage; 

    private async Task Authenticate()
    {
        try
         {
            var loginResponse = await _httpClient.PostAsJsonAsync<UserReuestForToken>("api/User/GetToken", Model);

            if (loginResponse.IsSuccessStatusCode)
            {
                var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
                var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customStateProvider.UpdateAuthenticationState(userSession);
                navigationManager.NavigateTo("/", true);
            }
            else if (loginResponse.StatusCode == HttpStatusCode.Unauthorized)
            {
                errorMessage = "Неправильное имя пользователя или пароль";
                await js.InvokeVoidAsync("alert", "Неправильное имя пользователя или пароль");
                return;
            }
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", "API сервера не работает!!!");
        }
    }
}