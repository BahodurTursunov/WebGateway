@page "/active-gateways"

<h3>Активные Шлюзы</h3>
<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" href="/check-gateways">Все шлюзы</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="/active-gateways">Активные шлюзы</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" href="/inactive-gateways">Неактивные шлюзы</a>
    </li>
</ul>
@if (_list != null)
{
    <div class="container">
        <div class="row g-2">
            @foreach (var item in _list.Where(g => g.Status == "1"))
            {
                <div class="col-3">
                    <div class="card fixed-card-size @GetStatusCardClass(item.Status)">
                        <div class="card-body">
                            <h5>@item.Name</h5>
                            <p class="card-text text-muted"></p>
                        </div>
                        <div class="card-footer d-flex align-items-center @GetStatusFooterClass(item.Status)" style="color: white; text-align: left;">
                            <span class="badge @GetStatusBadgeClass(item.Status)"></span>
                            <p class="mb-0">@GetStatusText(item.Status)</p>
                        </div>
                    </div>
                </div>
            }
        </div>
        <p class="mt-4">Total Active Gateways: @_list.Count(g => g.Status == "1")</p>
    </div>
}
else if (_isLoading)
{
    <div class="text-center mt-4">
        <div class="loading-progress">
            <svg width="80" height="80">
                <circle cx="40" cy="40" r="36"></circle>
                <circle cx="40" cy="40" r="36"
                    stroke-dasharray="calc(3.141 * var(--blazor-load-percentage, 0%) * 0.8), 500%"></circle>
            </svg>
            <p class="loading-progress-text">Загрузка...</p>
        </div>
    </div>
}
else
{
    <p class="text-secondary mt-4">Произошла ошибка при загрузке данных.</p>
}

@code {
    private string? authToken;
    private List<ConditionResponse> _list = new();
    private ConcurrentDictionary<string, ConditionResponse> _responseDict = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CheckAuthTokenAsync();
            if (!string.IsNullOrWhiteSpace(authToken))
            {
                await CallApisInParallel();
            }
        }
        catch (Exception)
        {
            // Handle exception
        }
    }
    
    private async Task CheckAuthTokenAsync()
    {
        authToken = await _customAuthenticationStateProvider.GetToken();
        if (string.IsNullOrWhiteSpace(authToken))
        {
            navigationManager.NavigateTo("/login");
        }
    }

   private async Task CallApisInParallel()
    {
        try
        {
            var apiGroups = new List<List<string>>
            {
                new List<string>
                {
                "api/checkABS",
                "api/Alif/BankCardRu",
                "api/checkAlif",
                "api/checkAmonatBonk",
                "api/checkAnorMobile",
                "api/checkAnt",
                "api/checkArdo",
                "api/Arvand/Wallet",
                "api/checkArvand",

                "api/checkAziziMoliya",
                "api/BPC_Visa/SberBank",
                "api/BPC_Visa/TCB",
                "api/BPC_Visa/Tinkoff",
                "api/BPC_Visa/TJS",
                "api/BPC_Visa/VTB",
                "api/BPC_Visa/ZP",
                "api/checkBPC_Visa",
                "api/checkBabilon",
                "api/checkBarakatMoliya",
                "api/checkBarakatTj",
                "api/checkDcity",
                "api/EskhataOnline/EskhataLeasing",
                "api/EskhataOnline/Favri2EskhataOnline",
                "api/checkEskhataOnline",
                "api/checkExpressPay",
                "api/checkFinka",
                "api/checkFormulaUspekha",
                "api/checkGosstandart",
                "api/checkGumruk",
                },
                new List<string>
                {"api/checkHosil",
                "api/checkHumo",
                "api/checkImon",
                "api/checkImonFond",
                "api/checkMTC",
                "api/MTM/SberBank",
                "api/MTM/TinkoffBank",
                "api/MTM/CheckCard",
                "api/MTM/ZP",
                "api/MTM/Woopay",
                "api/MTM/TCB",
                "api/checkMTM",
                "api/checkMatin",
                "api/checkMegafon",
                "api/checkNavovarhoiM",
                "api/checkOilaTV",
                "api/checkOrienbank",
                "api/checkOsonPay",
                "api/PMBService/Card",
                "api/PMBService/PMB",

                "api/checkPMBService",
                "api/checkPayvandGroupBank",
                "api/checkSalomTaxi",
                "api/checkSanoatSodirotBonk",
                "api/checkShahriBekhatar",
                "api/checkSmartPay",
                "api/checkSonyia",
                "api/checkTTLNGN",
                "api/checkTajPay",
                "api/checkTavhidbonk",
                "api/checkTax",
                "api/TaxiMaxim/Faberlic",
                "api/TaxiMaxim/Telecom",
                "api/checkTaxiMaxim",
                "api/checkTcell",
                "api/checkTechnoMoliya",
                "api/checkTojturon",
                "api/checkUzCard",
                "api/checkVasl",
                "api/checkZet_Mobile",
                }
                };

            foreach (var apiGroup in apiGroups)
            {
                var tasks = apiGroup.Select(GetResponse).ToList();
                await Task.WhenAll(tasks);
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            await js.InvokeVoidAsync("alert", "API сервера не работает!!!");
        }
    }
    private async Task GetResponse(string endpoint)
    {
        try
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
            var response = await _httpClient.GetFromJsonAsync<ConditionResponse>(endpoint);
            if (response != null)
            {
                if (!_responseDict.ContainsKey(response.Name))
                {
                    _responseDict[response.Name] = response;
                    _list.Add(_responseDict[response.Name]);
                }
            }
        }
        catch { }
    }

    private string GetStatusCardClass(string status) => status switch
    {
        "1" => "bg-success",
        "0" => "bg-danger",
        "2" => "bg-warning",
        _ => "bg-secondary",
    };

    private string GetStatusBadgeClass(string status) => status switch
    {
        "1" => "bg-success",
        "0" => "bg-danger",
        "2" => "bg-warning",
        _ => "bg-secondary",
    };

    private string GetStatusText(string status) => status switch
    {
        "1" => "Active",
        "0" => "Inactive",
        "2" => "Inactive",
        _ => "Unknown",
    };

    private string GetStatusFooterClass(string status) => status switch
    {
        "1" => "bg-success",
        "0" => "bg-danger",
        "2" => "bg-warning",
        _ => "bg-secondary",
    };
}
